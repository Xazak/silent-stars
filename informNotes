TODO -[[
BUGS:
[ ] The only controls for the autodoc are on the inside
[ ] Toggle switches do not have "flip switch" implemented
[ ] Provide logic to control panels that causes any sub-parts of the panel to become unresponsive if the panel itself is inactive
[ ] Executing a look action should tell the player what the MC does while looking, e.g. "You steady yourself on the lathe and glance around furtively:"
[ ] The indefinite articles in the listening-ambient reports need to be massaged
[ ] Player should be able to listen at a specific direction to hear what's in the next room
[ ] Player should also be able to listen to something clamorous that is nearby but not in the same room and get a general idea of where the noisemaker is relative to the player's position
[ ] The player should be able to use the RECALL (aka REMEMBER) command to remember where a given thing is located in the ship; if the player tries to recall something that has been destroyed or lost, that should be made clear also; second, the player should be able to ask for abstractions - "REMEMBER THE BEST THING, REMEMBER FOOD" etc - and I7 will retrieve the appropriate memory
[ ] Need to restrict movement inside the autodoc, see ex381: might be too heavyweight for what I want to do?
[ ] Not sure how to get rid of the "On the [supporter]..." part of the message created when examining a supporter
[ ] Shipboard directions can be assigned compass directions easily ("Understand "fore" as north." &c) but the map does not correctly draw these relationships. The easy way out would be to use compass directions long enough to get the game done and the map exported, and then search-replace all of the compass directions into shipboard ones while leaving the shipboard-compass direction assignment intact. I'd rather use the shipboard dirs from the start though.
[ ] Refer to ex178 for random variations into text
[ ] Problems involving hypothermia require a way to measure the ambient temp and the player temp
[ ] Problems involving radiation sickness require similar ways

IMPROVEMENTS:
[ ] Set up the "using" and "using it on" verbs as a syntactic stand-in for the most appropriate verb to be used with a thing
[ ] "Take shower" needs to be made correctly implicit
[ ] Implement WEEP "(weeping salt tears like a tiny baby)" as a derogatory synonym for HINT
[ ] "Set locker to ####" should be made to implicitly mean the lock of the locker
[ ] Make sure to use the [last action] token in any scenery-action rules (i.e. "The syrupy ichor splashes partway up your leg as you [last action]."
[ ] Improve the implicit noun supplication for UNCLOG DRAIN
[ ] The player should receive brief lightning-flashes of memory as the PC wanders about interacting; performing these little drops should happen via an activity that is activated both passively as background ambiance and actively in response to particular stimuli
[ ] There should be small notable messages that fire when a puzzle is completed, to let the player know they were successful and drop clues to the next puzzle on their path
[ ] Add synonyms to X SELF ie DIAGNOSE, HEALTH, STATUS, etc
[ ] Set up the personal locker to implicitly unlock when opened for the 2nd time onward
[ ] An object-based rulebook to preferentially wear certain items when picked up
[ ] Instead of having infrared things pass a flag, there is a way to make things conditionally ignore specific rules
[ ] Edit certain body parts to show a different description if there is a mirror or suchlike around

MESSAGE CHANGES:
[X] Adjust: Rewrite the illumination rule to take advantage of the color of a thing
[?] Addition: hands need alternate description while in dreamtime
[ ] Remove/Replace: The room description header is reprinted during a light level changeover
[ ] "Time passes." - after executing WAIT
[ ] Addition: The light status of the room and any overriding light sources in the room should be communicated to the player via a short message directly previous to the room description and after the heading (if possible). Ex: "The sunrod in your hand does a good job of lighting up the shadows. /n/nThe Medical Bay is..."
[ ] "(providing light)" message shown while listing inventory
[ ] "It seems to be locked." when attempting to open a locked door
[ ] "It is now pitch dark in here!" when a room moves from lit to dark
[ ] "It is pitch dark, and you can't see a thing." when examining something in the dark(?)
[ ] Addition: Messages regarding equilibrioception to the message generated by a WAIT command

Needed objects:
Doortypes: hatches, blast doors
Objects: bandage, styptic powder? antiseptic?
]]-
CLARIFICATIONS -[[
If trying to work around the "can't use multiple objects with this verb" error use [things] instead of just [thing] in the action definition.

The [room-describing action] is defined as the action that is the reason for the room being described; if a player is simply LOOKing, then it will be the looking action; on the other hand, if the player has just tried GO EAST and landed here, then it will be set to the going action.

Unlike rooms/containers, there is no direct/indirect region containment distinction; thus, to get the most specific region containing the player, use [the map region of the location]. 

"In the study is a desk. In the desk is a sheet of paper."
Assuming the above:
-The location of the sheet of paper is "the man"
-The location of the desk is "the study"
-The study and the desk both enclose the sheet of paper
A thing encloses whatever is a part of itself, or inside itself, or on top of itself, and is recursive for multiple containers.

See if there's a way to make the locked status of a thing describe it.
]]-
QUESTIONS -[[
Does I7 generate a "light status has changed" message when moving from a lit room to a dark one and vice versa?

Can Inform randomly interject bits of text into the ongoing stream, i.e. from a table of phrases? 
example: "There I was, dangling in space. Not sure what to do next. Was I going to head back? Or just stay out there longer?"
becomes
"There I was, dangling in space. Not (you're bad at this) sure what to do next. (you'll never finish) Was I going to head back? Or just stay out there longer?"

A protagonist who can see into the ultraviolet range would be really cool!

Is asking "has [limb] ever been wounded at all?" a meaningful question?
]]-
DANGER: The Sinking Ship -[[
	...has fallen prey to a serious disaster, one that will obliterate the ship in a matter of hours.
	Cursed Place; wants to break apart and become nothing
	! Caused by planted explosives
	! One fuel tank is a shell, the other is leaking into the ship
	Portents:
	1) The player obtains a status report on the ship, indicating damage levels
	2) The player discovers that access to Deck D is restricted due to the rising fuel leaking from the tanks 
	3) The fuel filling Deck D catches fire
	4) The fire reaches the $ROOM and causes explosions
	Stakes: Will the player be able to escape the Starlight Dancer before it consumes itself in fire?
	Doom: Obliteration
]]-
DANGER: The Localized Matter Rehabilitator -[[
...has been infected with a virus that has corrupted its programming, causing it to attack organic material in an attempt to clean it up.
Corrupted Machine; wants to clean and fix the ship
Goals:
	- Enter all the rooms
	- Look in all the unlocked boxes
	- Clean all the dirty things
Portents:
	1) The LMR emits strange noises that can be heard from a few rooms away
	2) The LMR's eyes are stuck on FLOODLIGHT, and so it can be seen coming in the right circumstances
	3) The LMR emits a particular noise when it opens a closed door
	4) The LMR overwhelms the player with its floodlight eyes and attacks
Stakes: Will the player be able to evade the LMR long enough to disable or reprogram it?
Doom: Death
Notes:
	- Was formerly an exterior maintenance robot; its programming was corrupted either before or during the sabotage and it nows roams the inside
	- The player may be able to hide from the LMR in an opaque container, but it must be able to lock or the LMR will open it
	- The player will have some opportunities to disable or destroy the LMR; if disabled, it might possibly be recruited
OPERATION CYCLE:
	--Moves from wandering to inquiring to cleaning phases before starting over again at wandering
	--Remembers which rooms it has cleaned so as to avoid recleaning them, but when it runs out of rooms to clean it restarts all over again instead of shutting down as per normal operations
	Wandering:
	1) The LMR scans the deck its on and builds a list of rooms to check 
	2) The LMR chooses the first room off the list and heads for it
	3) If it reaches its destination, it shifts to Inquiring mode
	4) If it cannot reach its destination, [it discards the room off the list and chooses a new one]
	Inquiring:

	Properly writing Report rules for lemur actions will require custom action-result handling in each case, I7 does not appear to have suitable rules
]]-
DANGER: Aurita, the Shipboard AI -[[
	...has gone insane after the sabotage to the ship overwhelmed her tolerances; she now thinks herself responsible and wants to bury her despair
	Insane Artificial Intelligence; wants to hide any evidence and run from her guilt
	! Dealing with Aurita and her psychoses is the mind game to the hardline puzzle solving aboard the ship
	Portents:
	1) If the player tries to access data that Aurita considers incriminating, she will try to corrupt the persocom to force a wipe
	2) If the player tries to confront Aurita directly about the sabotage, she will choose a psychosis (denial, rage, etc) and evade
	3) Lacking any way to affect the ship herself, she will try to trick the player into destroying the ship 
	Stakes: Will the player be able to bring Aurita around or will she be consumed along with the Starlight Dancer?
	Doom: Destruction
]]-

PUZZLE SPECS -[[
PC Basic Moves:
- HACK a system
- REPAIR a widget
- GREP for information
- ENGINEER a widget
- OBTAIN supplies
- MOVE to a new location
- HIDE from the LMR
- EMAIL Aurita

Starlight Dancer Basic Moves:
- VENT into space
- CATCH AFLAME
- CONTAMINATE the player
- etc for each wound modality

LMR Basic Moves:
- FIND something dirty
- MOVE towards the target thing
- CLEAN the target thing (according to internal logic)
- DELAY because corrupted programming

Aurita Basic Moves:
- NOTICE something
- CONSIDER her goals
- MAKE UP a lie
- SABOTAGE a system 
- EMAIL the player

Medbay:
PC	OBTAIN - starting gear, HACK - medbay door, REPAIR - the organic clog in the room
SD	CONTAMINATE the player via biohazard
LMR	AVOID the medbay because locked
AUR	NOTICE the medbay door hack then EMAIL the player

Astrogation:
PC	HACK - astrogation hatch (current privs not high enough), GREP - for current ship location, HACK - the astrogation console to behave as 2nd bridge
SD	nothing
LMR	AVOID the astrogation because locked
AUR	NOTICE any activity on the astrogation console then CONSIDER her goals

Science Labs:
PC	GREP - re: ship & crew background, journal entries, REPAIR - a small workbench, UPGRADE - small workbench to be more versatile
SD	FILL with steam then VENT into space then FILL with air
LMR	AVOID the Science Labs because locked
AUR	IGNORE the Science Labs

Life Support:
PC	HACK - the life support hatch, GREP - for current ship status and life support config, HACK - the life support console to enable certain systems
SD	nothing
LMR	AVOID the Life Support because locked
AUR	NOTICE any activity in LS then CONSIDER her goals

Elevator A:
PC	REPAIR - the broken elevator hatch to force open, HACK - the elevdoor sensor to disregard the error, MOVE - to Deck B
SD	BLOCK the player from moving UNLESS fixed
LMR	AVOID the ElevA shaft because blocked
AUR	NOTICE the player moving between decks

]]-
THE MAP -[[
Deck A
		Recyl	Med Bay	 ->\
			  \		|
AFT|	ElevA -	HallA x2	  -	Astro
			  /		|
		LfSup	Sci Lab	 ->/
-
Deck B
		|<- 	Crew Quarters Alpha		->|	XOQtr\
						\	|			   /
AFT|	SecAI -	ElevA -	HallB x2 [Bridge] -	ElevB -	RecRm
			  			/	|			   \
		|<- 	Crew Quarters Beta		->|	CpQtr/
-
Deck C
		|<- 	Fuel Tank Alpha				 ->\
<- THRUSTER ACCESS
AFT| >-	EngPt -	ElevA -	HallC x2 [Bridge] -	ElevB -	MShop
<- THRUSTER ACCESS
		|<- 	Fuel Tank Beta				 ->/
-
Deck D
		| Eva	 ->| |<-	Cargo			 ->\
					 \		|		/
AFT|	| Eva -	ElevA -	HallD x2 [Secure] -	ElevB -	Cargo
					 /		|		\
		| Eva	 ->| |<-	Cargo			 ->/
]]-
Deck A/Medical Bay -[[
PUZZLE: Player is trapped inside the autodoc and must get out
	STATUS: Mechanics are partially written, has been shelved as incomplete (see notes)
	COMPLICATIONS: 
	-- Recent mysterious injuries and attendant treatments has left the PC's brain fuzzy, the controls are hard to read
	SOLUTION:
	1- push cycle button
	2- push unlock button
	3- push exit button
	4- exit 
	NOTES:
	-- will need a way for the player to address the first, second, etc choices given
	-- still need to work out how to scramble all the button names, problem is rather intractable and has been shelved until i can ascertain whether or not i will want to reuse the scrambler function later on
	-- might be able to use [mangle][/mangle] tags in order to get the job done, would rather scramble names by way of a rulebook
	-- more complex controls may be added later, ability to reprogram with persocom? or just runs on autodetect?

PUZZLE: The floor has about a three-inch-deep pool of blood and the drain is blocked
	STATUS: Done
	COMPLICATIONS:
	-- There is a drain sunk into the floor but it is blocked and requires a tool to be unlocked
		-- The player cannot use the chemshower without first draining the blood out of the room
	SOLUTION:
	.. (player gets out of autodoc)
	1- x blood [soft move: augurs the drain]
	2- search blood [causes the drain to be accessible]
	3- x drain [warns the player about the clog]
	X- unblock drain [requires a tool to be unblocked]
	4- get jagged scrap
	5- unblock drain with scrap [clog is moved offstage, blood is moved into the drain, scrap is moved offstage]

PUZZLE: The player needs to take a shower and wash all this blood off
	STATUS: Done
	COMPLICATIONS:
	-- The massive pool of blood covering the medbay floor renders any attempts to get clean worthless
	SOLUTION:
	.. (player drains the blood out of the room)
	1- enter shower
	2- press cycle button
	3- exit
	.. (player opens the locker)
	4- take towel
	5- dry off
	6- wear jumpsuit

PUZZLE: The player's gear is inside a locked locker and they are naked
	STATUS: Placeholder is currently being used, corpse should be exchanged with another prompt to REMEMBER
	OBSTACLES:
	-- The pool of blood all over the room needs to be drained or the contents of the locker will get dirty
	COMPLICATIONS:
	-- The player needs to take a shower before putting on any clothes
	SOLUTION:
	.. (player takes a shower)
	1- (player discovers locker combo)
	2- set lock to NNNN
	3- (player takes contents of locker)
	NOTES:
	-- see example 287: Safety for a simple dial-combination lock 
		-- the 'text' and 'number' types are too general to allow 'the text understood', so a token like "channel" needs to be set up to allow the code to understand what is meant by "the channel understood"

PUZZLE: The player needs to clean and bandage the wound on their hand
	STATUS: Done
	OBSTACLES:
	-- If there's any medical equipment in the room, it's inside the gear locker
	-- The pool of blood in the room makes cleaning the wound a dicey proposition
	COMPLICATIONS:
	-- The player is stark naked and has nothing to improvise with
	SOLUTION:
	-- Gain access to the player's gear locker
	-- Use the medical kit inside to clean and bandage the wound

PUZZLE: The medbay door is stuck shut
	STATUS: Done
	COMPLICATIONS:
	-- The lock cannot be disengaged normally because the control panel is broken
	-- The player has a pocket terminal that will allow secondary access but it's inside a gear locker
		!! The handcomp's battery is only just charged enough to allow this puzzle to be completed; it requires a recharge directly after
	SOLUTION:
	-- Use the handcomp to bypass the door control panel
]]-
Deck A/Astrogation -[[
	HACK: The Astrogation hatch is locked and requires XO-permissions
	
]]-

MODELLING
VISIBILITY/EPISTEMOLOGY -[[
Currently, "visible" only covers objects that are in a lighted room. Attempting to redefine this appears to involve seriously deep hacking of the visibility calculations.

If a thing is seen, it is known.
If a thing is familiar, it is known.
If a thing is not seen or familiar, it is unknown.

Un/seen and un/familiar states can be set AND tested; un/known can only be tested.

The extension tries to automagically mark anything the player encounters as seen, and anything the player /examines/ as both seen and familiar. However, if an object is moved onstage by Inform manually, i.e. to simulate a dust bunny being found only when looking under a rug, the seen status will need to be /manually/ set.

The "subject" kind is provided by the extension to allow actors to be familiar with abstract concepts like love or physics. Subjects are considered familiar by default.

The EPISTAT debug command reveals the epistemic status of an object.
]]-
LISTENING -[[
I7 Default:
1) Listen cmd is issued
2) If no noun is supplied, -the ambient sound rule- supplies the location as the noun
3) I7 checks the -the block listening rule- and stops the action by default, no alternative outcomes possible

ambient sound rule is in the supplying a missing noun rules
block listening rule is in the Check listening to: rules

OBJECT PROPERTIES:
sound - The short sound of an object: "You hear [white noise] coming from the radio."
sound-description - The long sound of an object: "The radio emits a stream of static, broken up occasionally with hissing and popping."

FX DESIRED:
When the player tries LISTEN:
X	If the player supplies a noun, report the sound-description of the noun.
	If the player does not supply a noun:
	) I7 looks into the nearby rooms for anything NOTABLE and NOISY
	) If it finds anything, it adds those items to the list of things to listen to
	) I7 checks the location for ANY NOISY things
	) If it finds anything, it adds those to the list of things to listen to
	) I7 then reports the sounds of everything on the list of things to listen to
	) If nothing was found to listen to, it reports the sound of the location
	) If the location has no sound, it reports an ambient sound from the Table of Ambient Sounds

NEW PROCESSING:
1) If the player supplies a noun, listen or smell it as per default
2) If no noun is supplied, I7 checks the surroundings for any NOTABLE sounds/smells ("stimuli")
	--Sounds that are "noisy" should be audible from the next room over /at least/; maybe sounds have a decibel level that determines how far away it can be heard? On the flip side of that, have certain sounds that are /only/ audible if the player issues a LISTEN command?
	--Smells do not travel between rooms unless A) it's a strong smell and B) there is an open connection between the location of the smell and the location of the player (certain rooms have air vents that allow this to be circumvented?)
3) If ANY are found, ALL of them are reported to the player
4) If NONE are found, I7 supplies a semi-generic "You smell..." message
	--Not sure yet whether generic sounds should be on a per-room basis (maybe just for notable rooms?) or whether there should be an overall (per-region?) generic sounds table

Old Code -[[
[*** Listening]
Everything has some text called the sound. The sound is usually "silence".
Definition: a thing is audible rather than silent if the sound of it is not "silence".
Definition: a thing is prominent if it is audible and it is notable.
Definition: a thing is ambient if it is audible and it is mundane.

Definition: an area is noisy if it encloses a prominent thing.
Definition: an area is peaceful if it encloses an ambient thing and it does not enclose a prominent thing.
Definition: an area (called the place) is silent:
	if the place encloses a prominent thing, no;
	if the place encloses an ambient thing, no;
	yes;

[remove the original listening logic entirely]
The block listening rule is not listed in any rulebook.

To tune in:
	say "this is the tune in phrase.";
	let places be a list of areas; [all areas in the region]
	let houseparty be a list of areas; [all NOISY areas in the region]
	repeat with bar running through the list of areas contained by the map region of the location:
		add bar to places;
	say "added all areas in region to list places";
	repeat with target running through places:
		if target is noisy, add target to houseparty;
	say "[houseparty]";

Check listening:
	if the location is not noisy:
		if the location is not peaceful:
			tune in;
			say "You hear only the dead silence of a scuttled ship." instead;
		continue the action;
	continue the action;

[	say "[the location] - [if noisy]noisy[else if peaceful]peaceful[else if silent]silent[end if][line break]"; [NFR]
	if the location is silent:
		say "You hear only the dead silence of a scuttled ship." instead;
	continue the action;]
	
[	if the map region of the location is noisy:
		say "The region is noisy!"; [just kidding: decide which region to check, decide which rooms, decide which items, play those sounds]]

[Carry out listening:
	let ducks be the list of audible things in the location;]

Report listening:
	repeat with duck running through the audible things enclosed by the location:
		say "You hear [the sound of the duck], coming from the [printed name of the duck].";

Listening is sense behavior.
]]-
NOISE/PROMINENCE
"!silence" = [the sound of a thing] is anything other than "silence"
notable|mundane = is set manually ("now the thing is mundane")
			__notable_|_mundane_
"!silence"	|prominent| ambient|
"silence"	|  quiet  |  quiet |

prominent:
	-can be heard from anywhere in the same region
	-is always noisy

ambient:
	-can only be heard in the same room
	-is always noisy

quiet:
	-has no sound thus cannot be heard (returns failure on specific listen check, never appears in general check)

]]-
LIGHT -[[
After parsing a command but before the command is actually performed:
1) Is the action's noun within the actor's scope?
2) If so, does the action require light in order to be successful?
3) If so, is the location dark or lighted?
4) If dark, is the player carrying a lit thing?

Starry Night Lighting System Presumptions:
A room can be lighted or dark (dark).
	A room can be dark or dim or bright (dark).
	A bright or dim room should not be dark.
	A dark room should not be bright or dim.
In a bright room:
	I7 should behave as default: all visibility checks pass
In a dim room:
	Tenebrous things with fine detail cannot be examined closely
	Visibility checks fail without a source of direct light
	All objects should be in scope as normal
In a dark room:
	As dim room, except:
		Only luminous objects should be in scope
		Tenebrous objects are only in scope if they are familiar ("You left a widget here...") AND the player has a source of direct light
A thing can be lit or unlit (unlit).
	A lit thing can be diffuse or direct (diffuse).
	A lit thing can be dim or bright (dim).
A diffuse thing:
	Does not pass visibility checks
	Does not improve scope when searching
A direct thing:
	Can be used to examine fine detail no matter the background light level
	Allows the player to find familiar tenebrous objects in the dark
A bright thing:
	Causes the background light level to act as bright, no matter its actual status
A dim thing:
	Causes the background light level to act as dim, no matter its actual status
An infrared thing:
	Is visible in any light level

HOW DOES THE FUCKING STOCK LIGHTING WORK
1) Game starts, initial lit/unlit states are defined their primitives
2) Visibility rulebook is set up
3) Gameworld is initialized and player actor placed in scene
4) The initial room description is processed
	4.1)Startup rulebook ends, when play begins rulebook is processed
	4.2)Turn sequence rulebook starts
5) I7 parses player's command
6) Deciding the scope activity is run
7) Generate action rule consulted: Command is interpreted, action variables are set
	7.1) Before (action) rulebook is consulted
	7.2) Basic visibility rule consulted: if light is required and not present, can't act in the dark rule is consulted
8) Consider the scene changing rules consulted
9) Every turn rule consulted
10) Timed events are checked, timeline advanced, scene change rules consulted again just in case
11) Adjust light rule is checked (this is where the I6 primitives regarding light and darkness are invoked)
12) Object acquisitions and score changes are checked
13) If the game should end here, the shutdown rulebook is checked
14) If not, the every turn rulebook is consulted again (step 5) (repeat until shutdown is appropriate)

A room can be lighted or dark (lighted).
A thing can be lit or unlit (unlit).

The specific action-processing rules is a rulebook.
The specific action-processing rulebook has a truth state called within the player's sight.

Visibility rules is a rulebook.
Visibility rules have outcomes there is sufficient light (failure) and there is insufficient light (success).

The adjust light rule (an I6 primitive, unfortunately) is listed (2nd from last) in the turn sequence rulebook.

The basic visibility rule is listed in the action-processing rules.
--The basic visibility rule does this:
1)checks the action to see if it requires light
2) if so, 
2.3)AND if the actor is the player 
2.6)AND if in darkness, 
3)asks the visibility rules whether the lack of light should stop the action
	(by default: yes if dark, no if light)
--Note that it only acts on the player, not NPCs!

A specific action-processing rule (this is the investigate player's awareness before action rule):
	consider the player's action awareness rules;
	if rule succeeded, now within the player's sight is true;
	otherwise now within the player's sight is false.
A specific action-processing rule (this is the report stage rule):
	if within the player's sight is true and action keeping silent is false,
		consider the specific report rulebook;

The can't act in the dark rule is listed last in the visibility rules.
The last visibility rule (this is the can't act in the dark rule): if in darkness, rule succeeds. [This causes the action to be blocked!]

ACTIVITIES/RULES
Printing the name of a dark room is an activity.
Printing the description of a dark room is an activity.
Printing the announcement of darkness is an activity.
Printing the announcement of light is an activity.
Printing a refusal to act in the dark is an activity.
The look around once light available rule is listed last in for printing the announcement of light.
This is the look around once light available rule:
	try looking.
Deciding the scope of something (future action) is an activity.
]]-
PROXIMITY -[[
|           proximate             |
| immediate  |       nearby       |
(in location)|(in neighboring room)
]]-
DAMAGE -[[
injury
	severity: number from 0 (unharmed) to 6 (maximal, i.e. untreatable)
	site: one limb
	class: one modality
	description: text to be displayed when eXamining the injury

remedy
	usefulness (vs severity): number from 0 to 6
	applications (vs site): list of one or more limbs
	factors (vs class): one or more modalities

INJURY		REMEDY
severity	usefulness
site		applications
class		factors

The actual injuries are not specifically tied to anything; simply invoke them with "attack with $INJURY"

]]-
THE PERSOCOM  -[[
Proposed fnxns:
network trace

Current fnxns:
Boot up process
	1 - Power-on self test
	2 - Initialize peripherals
	3 - Find and start the OS

Connect via ext cable
Link via wireless
Disconnect wireless


]]-

***REMINDERS
SEE 11.8 FOR SWITCH-CASE NOTATION
> EQUIVALENT TO "is greater than"
>= EQUIVALENT TO "at least"
< EQUIVALENT TO "is less than"
<= EQUIVALENT TO "at most"

"The/A foobar is here." <- Makes a thing called a "foobar" and puts it into the last-referred room
"There is a foobar here." <- Makes a thing called a "foobar here" and puts it offstage

Volume
 Book
  Part
   Chapter
    Section

initial appearance != item's description, see WwI 3.11
The initial appearance should be used to describe the object when the player /first sees it in the game world/, right up until the player picks it up (the "handled" property). When picked up and x'd, I7 uses the item's description; if dropped and encountered later, it will simply list the item as normal with everything else in the room.
